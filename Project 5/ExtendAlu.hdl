/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
	 ALU (x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=aluOut, zr=zrTemp, ng=ngTemp);
	 Mul (a=x, b=y, out=mulOut);
	 ShiftRight (in=y, out=rightY);
	 ShiftRight (in=x, out=rightX);
	 ShiftLeft (in=y, out=leftY);
	 ShiftLeft (in=x, out=leftX);
	 Mux4Way16 (a=rightY, b=rightX, c=leftY, d=leftX, sel=instruction[4..5], out=shiftOut);
	 Mux4Way16 (a=mulOut, b=shiftOut, c=mulOut, d=aluOut, sel=instruction[7..8], out=out, out[15]=ng, out[0..7]=first, out[8..15]=second);
	 
	 
	 Or8Way (in=first, out=firstRes);
	 Or8Way (in=second, out=secondRes);
	 Or (a=firstRes, b=secondRes, out=Nzr);
	 Not (in=Nzr, out=zr);
	 
}
